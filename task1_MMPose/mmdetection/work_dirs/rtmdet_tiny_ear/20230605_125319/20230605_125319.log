2023/06/05 12:53:20 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.9.16 (main, Mar  8 2023, 14:00:05) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 599797225
    GPU 0: NVIDIA GeForce RTX 3090
    CUDA_HOME: /usr/local/cuda-11.7
    NVCC: Cuda compilation tools, release 11.7, V11.7.64
    GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
    PyTorch: 2.0.1+cu117
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201703
  - Intel(R) oneAPI Math Kernel Library Version 2022.2-Product Build 20220804 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -D_GLIBCXX_USE_CXX11_ABI=0 -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=bool-operation -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=ON, TORCH_VERSION=2.0.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=1, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.15.2+cu117
    OpenCV: 4.5.5
    MMEngine: 0.7.3

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: None
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/05 12:53:21 - mmengine - INFO - Config:
dataset_type = 'CocoDataset'
data_root = 'data/Ear210_Keypoint_Dataset_coco/'
metainfo = dict(classes=('ear', ))
NUM_CLASSES = 1
load_from = None
MAX_EPOCHS = 200
TRAIN_BATCH_SIZE = 8
VAL_BATCH_SIZE = 4
stage2_num_epochs = 20
base_lr = 0.004
VAL_INTERVAL = 5
default_scope = 'mmdet'
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=1),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(
        type='CheckpointHook',
        interval=10,
        max_keep_ckpts=2,
        save_best='coco/bbox_mAP'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='DetVisualizationHook'))
env_cfg = dict(
    cudnn_benchmark=False,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='DetLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(type='LogProcessor', window_size=50, by_epoch=True)
log_level = 'INFO'
resume = False
train_cfg = dict(
    type='EpochBasedTrainLoop',
    max_epochs=200,
    val_interval=5,
    dynamic_intervals=[(180, 1)])
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
param_scheduler = [
    dict(
        type='LinearLR', start_factor=1e-05, by_epoch=False, begin=0,
        end=1000),
    dict(
        type='CosineAnnealingLR',
        eta_min=0.0002,
        begin=150,
        end=300,
        T_max=150,
        by_epoch=True,
        convert_to_iter_based=True)
]
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='AdamW', lr=0.004, weight_decay=0.05),
    paramwise_cfg=dict(
        norm_decay_mult=0, bias_decay_mult=0, bypass_duplicate=True))
auto_scale_lr = dict(enable=False, base_batch_size=16)
backend_args = None
train_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='CachedMosaic',
        img_scale=(640, 640),
        pad_val=114.0,
        max_cached_images=20,
        random_pop=False),
    dict(
        type='RandomResize',
        scale=(1280, 1280),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(640, 640)),
    dict(type='YOLOXHSVRandomAug'),
    dict(type='RandomFlip', prob=0.5),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(
        type='CachedMixUp',
        img_scale=(640, 640),
        ratio_range=(1.0, 1.0),
        max_cached_images=10,
        random_pop=False,
        pad_val=(114, 114, 114),
        prob=0.5),
    dict(type='PackDetInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='Resize', scale=(640, 640), keep_ratio=True),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(
        type='PackDetInputs',
        meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                   'scale_factor'))
]
train_dataloader = dict(
    batch_size=8,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=True),
    batch_sampler=None,
    dataset=dict(
        type='CocoDataset',
        data_root='data/Ear210_Keypoint_Dataset_coco/',
        metainfo=dict(classes=('ear', )),
        ann_file='train_coco.json',
        data_prefix=dict(img='images/'),
        filter_cfg=dict(filter_empty_gt=True, min_size=32),
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='CachedMosaic',
                img_scale=(640, 640),
                pad_val=114.0,
                max_cached_images=20,
                random_pop=False),
            dict(
                type='RandomResize',
                scale=(1280, 1280),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(640, 640)),
            dict(type='YOLOXHSVRandomAug'),
            dict(type='RandomFlip', prob=0.5),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(
                type='CachedMixUp',
                img_scale=(640, 640),
                ratio_range=(1.0, 1.0),
                max_cached_images=10,
                random_pop=False,
                pad_val=(114, 114, 114),
                prob=0.5),
            dict(type='PackDetInputs')
        ],
        backend_args=None),
    pin_memory=True)
val_dataloader = dict(
    batch_size=4,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='data/Ear210_Keypoint_Dataset_coco/',
        metainfo=dict(classes=('ear', )),
        ann_file='val_coco.json',
        data_prefix=dict(img='images/'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(640, 640), keep_ratio=True),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None))
test_dataloader = dict(
    batch_size=4,
    num_workers=2,
    persistent_workers=True,
    drop_last=False,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='CocoDataset',
        data_root='data/Ear210_Keypoint_Dataset_coco/',
        metainfo=dict(classes=('ear', )),
        ann_file='val_coco.json',
        data_prefix=dict(img='images/'),
        test_mode=True,
        pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='Resize', scale=(640, 640), keep_ratio=True),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(
                type='PackDetInputs',
                meta_keys=('img_id', 'img_path', 'ori_shape', 'img_shape',
                           'scale_factor'))
        ],
        backend_args=None))
val_evaluator = dict(
    type='CocoMetric',
    ann_file='data/Ear210_Keypoint_Dataset_coco/val_coco.json',
    metric=['bbox'],
    format_only=False,
    backend_args=None,
    proposal_nums=(100, 1, 10))
test_evaluator = dict(
    type='CocoMetric',
    ann_file='data/Ear210_Keypoint_Dataset_coco/val_coco.json',
    metric=['bbox'],
    format_only=False,
    backend_args=None,
    proposal_nums=(100, 1, 10))
tta_model = dict(
    type='DetTTAModel',
    tta_cfg=dict(nms=dict(type='nms', iou_threshold=0.6), max_per_img=100))
tta_pipeline = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale': (640, 640),
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale': (320, 320),
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale': (960, 960),
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 1.0
                    }, {
                        'type': 'RandomFlip',
                        'prob': 0.0
                    }],
                    [{
                        'type': 'Pad',
                        'size': (960, 960),
                        'pad_val': {
                            'img': (114, 114, 114)
                        }
                    }],
                    [{
                        'type':
                        'PackDetInputs',
                        'meta_keys':
                        ('img_id', 'img_path', 'ori_shape', 'img_shape',
                         'scale_factor', 'flip', 'flip_direction')
                    }]])
]
model = dict(
    type='RTMDet',
    data_preprocessor=dict(
        type='DetDataPreprocessor',
        mean=[103.53, 116.28, 123.675],
        std=[57.375, 57.12, 58.395],
        bgr_to_rgb=False,
        batch_augments=None),
    backbone=dict(
        type='CSPNeXt',
        arch='P5',
        expand_ratio=0.5,
        deepen_factor=0.167,
        widen_factor=0.375,
        channel_attention=True,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True),
        init_cfg=dict(
            type='Pretrained',
            prefix='backbone.',
            checkpoint=
            'https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth'
        )),
    neck=dict(
        type='CSPNeXtPAFPN',
        in_channels=[96, 192, 384],
        out_channels=96,
        num_csp_blocks=1,
        expand_ratio=0.5,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True)),
    bbox_head=dict(
        type='RTMDetSepBNHead',
        num_classes=1,
        in_channels=96,
        stacked_convs=2,
        feat_channels=96,
        anchor_generator=dict(
            type='MlvlPointGenerator', offset=0, strides=[8, 16, 32]),
        bbox_coder=dict(type='DistancePointBBoxCoder'),
        loss_cls=dict(
            type='QualityFocalLoss',
            use_sigmoid=True,
            beta=2.0,
            loss_weight=1.0),
        loss_bbox=dict(type='GIoULoss', loss_weight=2.0),
        with_objectness=False,
        exp_on_reg=False,
        share_conv=True,
        pred_kernel_size=1,
        norm_cfg=dict(type='SyncBN'),
        act_cfg=dict(type='SiLU', inplace=True)),
    train_cfg=dict(
        assigner=dict(type='DynamicSoftLabelAssigner', topk=13),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        nms_pre=30000,
        min_bbox_size=0,
        score_thr=0.001,
        nms=dict(type='nms', iou_threshold=0.65),
        max_per_img=300))
train_pipeline_stage2 = [
    dict(type='LoadImageFromFile', backend_args=None),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(
        type='RandomResize',
        scale=(640, 640),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(640, 640)),
    dict(type='YOLOXHSVRandomAug'),
    dict(type='RandomFlip', prob=0.5),
    dict(type='Pad', size=(640, 640), pad_val=dict(img=(114, 114, 114))),
    dict(type='PackDetInputs')
]
custom_hooks = [
    dict(
        type='EMAHook',
        ema_type='ExpMomentumEMA',
        momentum=0.0002,
        update_buffers=True,
        priority=49),
    dict(
        type='PipelineSwitchHook',
        switch_epoch=180,
        switch_pipeline=[
            dict(type='LoadImageFromFile', backend_args=None),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(
                type='RandomResize',
                scale=(640, 640),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(640, 640)),
            dict(type='YOLOXHSVRandomAug'),
            dict(type='RandomFlip', prob=0.5),
            dict(
                type='Pad', size=(640, 640),
                pad_val=dict(img=(114, 114, 114))),
            dict(type='PackDetInputs')
        ])
]
launcher = 'none'
work_dir = './work_dirs/rtmdet_tiny_ear'

2023/06/05 12:53:25 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/05 12:53:25 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_load_checkpoint:
(49          ) EMAHook                            
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
(NORMAL      ) PipelineSwitchHook                 
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_save_checkpoint:
(49          ) EMAHook                            
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DetVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(49          ) EMAHook                            
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stem.0.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stem.1.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stem.2.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage1.0.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage1.1.main_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage1.1.short_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage1.1.final_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage1.1.attention.fc.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage2.0.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage2.1.main_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage2.1.short_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage2.1.final_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage2.1.attention.fc.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage3.0.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage3.1.main_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage3.1.short_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage3.1.final_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage3.1.attention.fc.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage4.0.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv1.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage4.1.conv2.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage4.2.main_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage4.2.short_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage4.2.final_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- backbone.stage4.2.attention.fc.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.reduce_layers.0.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.reduce_layers.1.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.main_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.short_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.final_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.main_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.short_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.final_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.downsamples.0.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.downsamples.1.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.main_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.short_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.final_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.main_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.short_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.final_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.out_convs.0.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.out_convs.1.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- neck.out_convs.2.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.0.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.0.1.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - WARNING - bbox_head.cls_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.0.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - WARNING - bbox_head.cls_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.1.1.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - WARNING - bbox_head.cls_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.0.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - WARNING - bbox_head.cls_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.cls_convs.2.1.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.0.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.0.1.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - WARNING - bbox_head.reg_convs.1.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.0.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - WARNING - bbox_head.reg_convs.1.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.1.1.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - WARNING - bbox_head.reg_convs.2.0.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.0.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - WARNING - bbox_head.reg_convs.2.1.conv is duplicate. It is skipped since bypass_duplicate=True
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.weight:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.reg_convs.2.1.bn.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.0.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.1.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.rtm_cls.2.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.0.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.1.bias:weight_decay=0.0
2023/06/05 12:53:26 - mmengine - INFO - paramwise_options -- bbox_head.rtm_reg.2.bias:weight_decay=0.0
2023/06/05 12:53:27 - mmengine - INFO - load backbone. in model from: https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth
Name of parameter - Initialization information

backbone.stem.0.conv.weight - torch.Size([12, 3, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.0.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.conv.weight - torch.Size([12, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.weight - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.1.bn.bias - torch.Size([12]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.conv.weight - torch.Size([24, 12, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stem.2.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.conv.weight - torch.Size([48, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.0.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.main_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.conv.weight - torch.Size([24, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.short_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.final_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.conv.weight - torch.Size([24, 24, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv1.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([24, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([24, 24, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([24]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage1.1.attention.fc.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.conv.weight - torch.Size([96, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.0.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.main_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.conv.weight - torch.Size([48, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.short_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.final_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage2.1.attention.fc.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.conv.weight - torch.Size([192, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.0.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.main_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.short_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.final_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv1.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage3.1.attention.fc.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.conv.weight - torch.Size([384, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.0.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.conv.weight - torch.Size([384, 768, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.1.conv2.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.main_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.short_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.weight - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.final_conv.bn.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv1.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.weight - torch.Size([384, 384, 1, 1]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

backbone.stage4.2.attention.fc.bias - torch.Size([384]): 
PretrainedInit: load from https://download.openmmlab.com/mmdetection/v3.0/rtmdet/cspnext_rsb_pretrain/cspnext-tiny_imagenet_600e.pth 

neck.reduce_layers.0.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.reduce_layers.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.reduce_layers.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.main_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.main_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.conv.weight - torch.Size([48, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.short_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.short_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.final_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.final_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.conv.weight - torch.Size([48, 48, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv1.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv1.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([48, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([48, 48, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.top_down_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([48]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.downsamples.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.downsamples.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.main_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.main_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.conv.weight - torch.Size([96, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.short_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.short_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.final_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.final_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([96, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([96, 96, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.0.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.main_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.main_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.conv.weight - torch.Size([192, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.short_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.short_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.conv.weight - torch.Size([384, 384, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.final_conv.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.final_conv.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.conv.weight - torch.Size([192, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.conv.weight - torch.Size([192, 1, 5, 5]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.depthwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.conv.weight - torch.Size([192, 192, 1, 1]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.bottom_up_blocks.1.blocks.0.conv2.pointwise_conv.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.conv.weight - torch.Size([96, 96, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.conv.weight - torch.Size([96, 192, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.conv.weight - torch.Size([96, 384, 3, 3]): 
KaimingInit: a=2.23606797749979, mode=fan_in, nonlinearity=leaky_relu, distribution =uniform, bias=0 

neck.out_convs.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

neck.out_convs.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.cls_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.cls_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.conv.weight - torch.Size([96, 96, 3, 3]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.reg_convs.0.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.0.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.1.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.reg_convs.2.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of RTMDet  

bbox_head.rtm_cls.0.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.0.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.1.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.weight - torch.Size([1, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_cls.2.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.0.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.1.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.weight - torch.Size([4, 96, 1, 1]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  

bbox_head.rtm_reg.2.bias - torch.Size([4]): 
Initialized by user-defined `init_weights` in RTMDetSepBNHead  
2023/06/05 12:53:28 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/05 12:53:28 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/05 12:53:28 - mmengine - INFO - Checkpoints will be saved to /home/superegg/PycharmProjects/OpenMMLab/MMPose_Tutorials/mmdetection/work_dirs/rtmdet_tiny_ear.
2023/06/05 12:53:34 - mmengine - INFO - Epoch(train)   [1][ 1/21]  lr: 4.0000e-08  eta: 7:06:41  time: 6.0971  data_time: 2.9339  memory: 2625  loss: 0.1025  loss_cls: 0.0665  loss_bbox: 0.0360
2023/06/05 12:53:34 - mmengine - INFO - Epoch(train)   [1][ 2/21]  lr: 4.0440e-06  eta: 3:45:58  time: 3.2299  data_time: 1.4702  memory: 2663  loss: 0.0909  loss_cls: 0.0665  loss_bbox: 0.0244
2023/06/05 12:53:34 - mmengine - INFO - Epoch(train)   [1][ 3/21]  lr: 8.0479e-06  eta: 2:37:54  time: 2.2575  data_time: 0.9813  memory: 2663  loss: 0.1106  loss_cls: 0.0665  loss_bbox: 0.0441
2023/06/05 12:53:35 - mmengine - INFO - Epoch(train)   [1][ 4/21]  lr: 1.2052e-05  eta: 2:03:40  time: 1.7684  data_time: 0.7367  memory: 2663  loss: 0.1016  loss_cls: 0.0665  loss_bbox: 0.0351
2023/06/05 12:53:35 - mmengine - INFO - Epoch(train)   [1][ 5/21]  lr: 1.6056e-05  eta: 1:43:17  time: 1.4773  data_time: 0.5900  memory: 2663  loss: 0.1090  loss_cls: 0.0664  loss_bbox: 0.0426
2023/06/05 12:53:35 - mmengine - INFO - Epoch(train)   [1][ 6/21]  lr: 2.0060e-05  eta: 1:29:21  time: 1.2783  data_time: 0.4923  memory: 2663  loss: 0.1339  loss_cls: 0.0664  loss_bbox: 0.0675
2023/06/05 12:53:36 - mmengine - INFO - Epoch(train)   [1][ 7/21]  lr: 2.4064e-05  eta: 1:19:38  time: 1.1396  data_time: 0.4225  memory: 2663  loss: 0.1442  loss_cls: 0.0663  loss_bbox: 0.0779
2023/06/05 12:53:36 - mmengine - INFO - Epoch(train)   [1][ 8/21]  lr: 2.8068e-05  eta: 1:12:25  time: 1.0365  data_time: 0.3701  memory: 2663  loss: 0.1432  loss_cls: 0.0663  loss_bbox: 0.0770
2023/06/05 12:53:37 - mmengine - INFO - Epoch(train)   [1][ 9/21]  lr: 3.2072e-05  eta: 1:11:17  time: 1.0207  data_time: 0.3864  memory: 2663  loss: 0.1454  loss_cls: 0.0662  loss_bbox: 0.0792
2023/06/05 12:53:38 - mmengine - INFO - Epoch(train)   [1][10/21]  lr: 3.6076e-05  eta: 1:09:55  time: 1.0014  data_time: 0.3911  memory: 2663  loss: 0.1655  loss_cls: 0.0662  loss_bbox: 0.0994
2023/06/05 12:53:38 - mmengine - INFO - Epoch(train)   [1][11/21]  lr: 4.0080e-05  eta: 1:06:45  time: 0.9562  data_time: 0.3736  memory: 2663  loss: 0.1810  loss_cls: 0.0665  loss_bbox: 0.1145
2023/06/05 12:53:39 - mmengine - INFO - Epoch(train)   [1][12/21]  lr: 4.4084e-05  eta: 1:03:01  time: 0.9030  data_time: 0.3428  memory: 2663  loss: 0.1810  loss_cls: 0.0664  loss_bbox: 0.1146
2023/06/05 12:53:40 - mmengine - INFO - Epoch(train)   [1][13/21]  lr: 4.8088e-05  eta: 1:05:50  time: 0.9434  data_time: 0.3900  memory: 2663  loss: 0.1796  loss_cls: 0.0662  loss_bbox: 0.1134
2023/06/05 12:53:41 - mmengine - INFO - Epoch(train)   [1][14/21]  lr: 5.2092e-05  eta: 1:06:51  time: 0.9582  data_time: 0.4226  memory: 2663  loss: 0.1846  loss_cls: 0.0661  loss_bbox: 0.1185
2023/06/05 12:53:42 - mmengine - INFO - Epoch(train)   [1][15/21]  lr: 5.6095e-05  eta: 1:05:29  time: 0.9389  data_time: 0.4190  memory: 2663  loss: 0.1999  loss_cls: 0.0662  loss_bbox: 0.1337
2023/06/05 12:53:42 - mmengine - INFO - Epoch(train)   [1][16/21]  lr: 6.0099e-05  eta: 1:02:41  time: 0.8989  data_time: 0.3930  memory: 2663  loss: 0.2116  loss_cls: 0.0661  loss_bbox: 0.1455
2023/06/05 12:53:43 - mmengine - INFO - Epoch(train)   [1][17/21]  lr: 6.4103e-05  eta: 1:02:12  time: 0.8923  data_time: 0.3957  memory: 2663  loss: 0.2075  loss_cls: 0.0660  loss_bbox: 0.1415
2023/06/05 12:53:44 - mmengine - INFO - Epoch(train)   [1][18/21]  lr: 6.8107e-05  eta: 1:04:49  time: 0.9301  data_time: 0.4463  memory: 2663  loss: 0.2478  loss_cls: 0.0669  loss_bbox: 0.1809
2023/06/05 12:53:45 - mmengine - INFO - Epoch(train)   [1][19/21]  lr: 7.2111e-05  eta: 1:02:50  time: 0.9019  data_time: 0.4288  memory: 2663  loss: 0.2788  loss_cls: 0.0752  loss_bbox: 0.2036
2023/06/05 12:53:45 - mmengine - INFO - Epoch(train)   [1][20/21]  lr: 7.6115e-05  eta: 1:00:55  time: 0.8746  data_time: 0.4075  memory: 2663  loss: 0.3043  loss_cls: 0.0758  loss_bbox: 0.2285
2023/06/05 12:53:46 - mmengine - INFO - Exp name: rtmdet_tiny_ear_20230605_125319
2023/06/05 12:53:46 - mmengine - INFO - Epoch(train)   [1][21/21]  lr: 8.0119e-05  eta: 1:00:32  time: 0.8692  data_time: 0.4060  memory: 2663  loss: 0.3173  loss_cls: 0.0753  loss_bbox: 0.2420
2023/06/05 12:53:49 - mmengine - INFO - Epoch(train)   [2][ 1/21]  lr: 8.4123e-05  eta: 1:08:31  time: 0.9841  data_time: 0.5213  memory: 2663  loss: 0.3959  loss_cls: 0.1153  loss_bbox: 0.2806
2023/06/05 12:53:50 - mmengine - INFO - Epoch(train)   [2][ 2/21]  lr: 8.8127e-05  eta: 1:06:34  time: 0.9563  data_time: 0.4988  memory: 2663  loss: 0.3999  loss_cls: 0.1138  loss_bbox: 0.2861
2023/06/05 12:53:50 - mmengine - INFO - Epoch(train)   [2][ 3/21]  lr: 9.2131e-05  eta: 1:04:39  time: 0.9289  data_time: 0.4781  memory: 2663  loss: 0.4723  loss_cls: 0.1542  loss_bbox: 0.3181
2023/06/05 12:53:50 - mmengine - INFO - Epoch(train)   [2][ 4/21]  lr: 9.6135e-05  eta: 1:02:52  time: 0.9036  data_time: 0.4591  memory: 2663  loss: 0.5270  loss_cls: 0.1671  loss_bbox: 0.3599
2023/06/05 12:53:53 - mmengine - INFO - Epoch(train)   [2][ 5/21]  lr: 1.0014e-04  eta: 1:06:38  time: 0.9581  data_time: 0.5175  memory: 2663  loss: 0.5415  loss_cls: 0.1642  loss_bbox: 0.3773
2023/06/05 12:53:53 - mmengine - INFO - Epoch(train)   [2][ 6/21]  lr: 1.0414e-04  eta: 1:05:21  time: 0.9397  data_time: 0.4984  memory: 2663  loss: 0.5914  loss_cls: 0.1858  loss_bbox: 0.4056
2023/06/05 12:53:54 - mmengine - INFO - Epoch(train)   [2][ 7/21]  lr: 1.0815e-04  eta: 1:04:08  time: 0.9225  data_time: 0.4808  memory: 2663  loss: 0.6342  loss_cls: 0.1929  loss_bbox: 0.4413
2023/06/05 12:53:54 - mmengine - INFO - Epoch(train)   [2][ 8/21]  lr: 1.1215e-04  eta: 1:02:49  time: 0.9037  data_time: 0.4644  memory: 2663  loss: 0.6334  loss_cls: 0.1885  loss_bbox: 0.4450
2023/06/05 12:53:57 - mmengine - INFO - Epoch(train)   [2][ 9/21]  lr: 1.1615e-04  eta: 1:07:05  time: 0.9654  data_time: 0.5270  memory: 2663  loss: 0.6643  loss_cls: 0.2059  loss_bbox: 0.4585
2023/06/05 12:53:57 - mmengine - INFO - Epoch(train)   [2][10/21]  lr: 1.2016e-04  eta: 1:05:46  time: 0.9466  data_time: 0.5102  memory: 2663  loss: 0.6883  loss_cls: 0.2142  loss_bbox: 0.4741
2023/06/05 12:53:57 - mmengine - INFO - Epoch(train)   [2][11/21]  lr: 1.2416e-04  eta: 1:04:35  time: 0.9299  data_time: 0.4943  memory: 2663  loss: 0.7014  loss_cls: 0.2167  loss_bbox: 0.4847
2023/06/05 12:53:58 - mmengine - INFO - Epoch(train)   [2][12/21]  lr: 1.2817e-04  eta: 1:03:20  time: 0.9121  data_time: 0.4794  memory: 2663  loss: 0.7225  loss_cls: 0.2223  loss_bbox: 0.5002
2023/06/05 12:54:00 - mmengine - INFO - Epoch(train)   [2][13/21]  lr: 1.3217e-04  eta: 1:05:40  time: 0.9460  data_time: 0.5133  memory: 2663  loss: 0.7498  loss_cls: 0.2223  loss_bbox: 0.5275
2023/06/05 12:54:00 - mmengine - INFO - Epoch(train)   [2][14/21]  lr: 1.3617e-04  eta: 1:04:33  time: 0.9299  data_time: 0.4987  memory: 2663  loss: 0.7791  loss_cls: 0.2332  loss_bbox: 0.5459
2023/06/05 12:54:01 - mmengine - INFO - Epoch(train)   [2][15/21]  lr: 1.4018e-04  eta: 1:03:25  time: 0.9138  data_time: 0.4849  memory: 2663  loss: 0.7975  loss_cls: 0.2411  loss_bbox: 0.5564
2023/06/05 12:54:01 - mmengine - INFO - Epoch(train)   [2][16/21]  lr: 1.4418e-04  eta: 1:02:20  time: 0.8985  data_time: 0.4719  memory: 2663  loss: 0.8137  loss_cls: 0.2490  loss_bbox: 0.5647
2023/06/05 12:54:03 - mmengine - INFO - Epoch(train)   [2][17/21]  lr: 1.4819e-04  eta: 1:03:38  time: 0.9175  data_time: 0.4927  memory: 2663  loss: 0.8956  loss_cls: 0.3221  loss_bbox: 0.5735
2023/06/05 12:54:03 - mmengine - INFO - Epoch(train)   [2][18/21]  lr: 1.5219e-04  eta: 1:02:44  time: 0.9048  data_time: 0.4801  memory: 2663  loss: 0.9224  loss_cls: 0.3183  loss_bbox: 0.6041
2023/06/05 12:54:03 - mmengine - INFO - Epoch(train)   [2][19/21]  lr: 1.5619e-04  eta: 1:01:50  time: 0.8920  data_time: 0.4682  memory: 2663  loss: 0.9442  loss_cls: 0.3174  loss_bbox: 0.6268
2023/06/05 12:54:04 - mmengine - INFO - Epoch(train)   [2][20/21]  lr: 1.6020e-04  eta: 1:00:53  time: 0.8784  data_time: 0.4569  memory: 2663  loss: 0.9599  loss_cls: 0.3160  loss_bbox: 0.6439
2023/06/05 12:54:06 - mmengine - INFO - Exp name: rtmdet_tiny_ear_20230605_125319
2023/06/05 12:54:06 - mmengine - INFO - Epoch(train)   [2][21/21]  lr: 1.6420e-04  eta: 1:02:41  time: 0.9045  data_time: 0.4843  memory: 2663  loss: 0.9693  loss_cls: 0.3220  loss_bbox: 0.6473
2023/06/05 12:54:09 - mmengine - INFO - Epoch(train)   [3][ 1/21]  lr: 1.6821e-04  eta: 1:06:33  time: 0.9607  data_time: 0.5404  memory: 2663  loss: 0.9866  loss_cls: 0.3204  loss_bbox: 0.6661
2023/06/05 12:54:09 - mmengine - INFO - Epoch(train)   [3][ 2/21]  lr: 1.7221e-04  eta: 1:05:40  time: 0.9482  data_time: 0.5285  memory: 2663  loss: 0.9971  loss_cls: 0.3182  loss_bbox: 0.6789
2023/06/05 12:54:10 - mmengine - INFO - Epoch(train)   [3][ 3/21]  lr: 1.7621e-04  eta: 1:04:44  time: 0.9348  data_time: 0.5169  memory: 2663  loss: 1.0049  loss_cls: 0.3201  loss_bbox: 0.6848
2023/06/05 12:54:10 - mmengine - INFO - Epoch(train)   [3][ 4/21]  lr: 1.8022e-04  eta: 1:03:48  time: 0.9217  data_time: 0.5057  memory: 2663  loss: 1.0155  loss_cls: 0.3246  loss_bbox: 0.6909
2023/06/05 12:54:12 - mmengine - INFO - Epoch(train)   [3][ 5/21]  lr: 1.8422e-04  eta: 1:04:53  time: 0.9374  data_time: 0.5230  memory: 2663  loss: 1.0259  loss_cls: 0.3259  loss_bbox: 0.7000
2023/06/05 12:54:12 - mmengine - INFO - Epoch(train)   [3][ 6/21]  lr: 1.8823e-04  eta: 1:04:17  time: 0.9292  data_time: 0.5159  memory: 2663  loss: 1.0391  loss_cls: 0.3267  loss_bbox: 0.7124
2023/06/05 12:54:13 - mmengine - INFO - Epoch(train)   [3][ 7/21]  lr: 1.9223e-04  eta: 1:03:29  time: 0.9176  data_time: 0.5055  memory: 2663  loss: 1.0488  loss_cls: 0.3343  loss_bbox: 0.7145
2023/06/05 12:54:13 - mmengine - INFO - Epoch(train)   [3][ 8/21]  lr: 1.9623e-04  eta: 1:02:43  time: 0.9070  data_time: 0.4955  memory: 2663  loss: 1.0573  loss_cls: 0.3316  loss_bbox: 0.7257
2023/06/05 12:54:15 - mmengine - INFO - Epoch(train)   [3][ 9/21]  lr: 2.0024e-04  eta: 1:04:04  time: 0.8231  data_time: 0.4664  memory: 2663  loss: 1.0848  loss_cls: 0.3358  loss_bbox: 0.7490
2023/06/05 12:54:16 - mmengine - INFO - Epoch(train)   [3][10/21]  lr: 2.0424e-04  eta: 1:03:49  time: 0.8309  data_time: 0.4731  memory: 2663  loss: 1.1125  loss_cls: 0.3402  loss_bbox: 0.7723
2023/06/05 12:54:16 - mmengine - INFO - Epoch(train)   [3][11/21]  lr: 2.0825e-04  eta: 1:03:12  time: 0.8339  data_time: 0.4731  memory: 2663  loss: 1.1386  loss_cls: 0.3477  loss_bbox: 0.7910
2023/06/05 12:54:17 - mmengine - INFO - Epoch(train)   [3][12/21]  lr: 2.1225e-04  eta: 1:02:34  time: 0.8365  data_time: 0.4732  memory: 2663  loss: 1.1669  loss_cls: 0.3519  loss_bbox: 0.8151
2023/06/05 12:54:18 - mmengine - INFO - Epoch(train)   [3][13/21]  lr: 2.1625e-04  eta: 1:03:04  time: 0.8565  data_time: 0.4906  memory: 2663  loss: 1.1904  loss_cls: 0.3562  loss_bbox: 0.8342
2023/06/05 12:54:19 - mmengine - INFO - Epoch(train)   [3][14/21]  lr: 2.2026e-04  eta: 1:03:30  time: 0.8766  data_time: 0.5086  memory: 2663  loss: 1.2072  loss_cls: 0.3632  loss_bbox: 0.8440
2023/06/05 12:54:20 - mmengine - INFO - Epoch(train)   [3][15/21]  lr: 2.2426e-04  eta: 1:02:52  time: 0.8784  data_time: 0.5086  memory: 2663  loss: 1.2275  loss_cls: 0.3693  loss_bbox: 0.8582
2023/06/05 12:54:20 - mmengine - INFO - Epoch(train)   [3][16/21]  lr: 2.2827e-04  eta: 1:02:19  time: 0.8814  data_time: 0.5086  memory: 2663  loss: 1.2485  loss_cls: 0.3777  loss_bbox: 0.8709
2023/06/05 12:54:21 - mmengine - INFO - Epoch(train)   [3][17/21]  lr: 2.3227e-04  eta: 1:02:43  time: 0.8887  data_time: 0.5169  memory: 2663  loss: 1.2746  loss_cls: 0.3939  loss_bbox: 0.8807
2023/06/05 12:54:23 - mmengine - INFO - Epoch(train)   [3][18/21]  lr: 2.3627e-04  eta: 1:03:22  time: 0.9020  data_time: 0.5292  memory: 2663  loss: 1.2925  loss_cls: 0.4009  loss_bbox: 0.8916
2023/06/05 12:54:23 - mmengine - INFO - Epoch(train)   [3][19/21]  lr: 2.4028e-04  eta: 1:02:46  time: 0.8998  data_time: 0.5253  memory: 2663  loss: 1.3119  loss_cls: 0.4111  loss_bbox: 0.9007
2023/06/05 12:54:24 - mmengine - INFO - Epoch(train)   [3][20/21]  lr: 2.4428e-04  eta: 1:02:09  time: 0.9007  data_time: 0.5252  memory: 2663  loss: 1.3461  loss_cls: 0.4208  loss_bbox: 0.9253
2023/06/05 12:54:25 - mmengine - INFO - Exp name: rtmdet_tiny_ear_20230605_125319
2023/06/05 12:54:25 - mmengine - INFO - Epoch(train)   [3][21/21]  lr: 2.4829e-04  eta: 1:02:41  time: 0.9004  data_time: 0.5286  memory: 2663  loss: 1.3720  loss_cls: 0.4217  loss_bbox: 0.9503
2023/06/05 12:54:28 - mmengine - INFO - Epoch(train)   [4][ 1/21]  lr: 2.5229e-04  eta: 1:05:27  time: 0.9471  data_time: 0.5747  memory: 2663  loss: 1.3944  loss_cls: 0.4296  loss_bbox: 0.9648
2023/06/05 12:54:29 - mmengine - INFO - Epoch(train)   [4][ 2/21]  lr: 2.5629e-04  eta: 1:04:46  time: 0.9403  data_time: 0.5674  memory: 2663  loss: 1.4050  loss_cls: 0.4423  loss_bbox: 0.9627
2023/06/05 12:54:29 - mmengine - INFO - Epoch(train)   [4][ 3/21]  lr: 2.6030e-04  eta: 1:04:09  time: 0.9415  data_time: 0.5674  memory: 2663  loss: 1.4226  loss_cls: 0.4532  loss_bbox: 0.9694
2023/06/05 12:54:30 - mmengine - INFO - Epoch(train)   [4][ 4/21]  lr: 2.6430e-04  eta: 1:03:32  time: 0.9327  data_time: 0.5587  memory: 2663  loss: 1.4466  loss_cls: 0.4650  loss_bbox: 0.9816
2023/06/05 12:54:31 - mmengine - INFO - Epoch(train)   [4][ 5/21]  lr: 2.6831e-04  eta: 1:04:31  time: 0.9394  data_time: 0.5639  memory: 2663  loss: 1.4528  loss_cls: 0.4735  loss_bbox: 0.9792
2023/06/05 12:54:32 - mmengine - INFO - Epoch(train)   [4][ 6/21]  lr: 2.7231e-04  eta: 1:03:53  time: 0.9378  data_time: 0.5617  memory: 2663  loss: 1.4637  loss_cls: 0.4792  loss_bbox: 0.9845
2023/06/05 12:54:32 - mmengine - INFO - Epoch(train)   [4][ 7/21]  lr: 2.7631e-04  eta: 1:03:15  time: 0.9368  data_time: 0.5617  memory: 2663  loss: 1.4759  loss_cls: 0.4902  loss_bbox: 0.9857
2023/06/05 12:54:32 - mmengine - INFO - Epoch(train)   [4][ 8/21]  lr: 2.8032e-04  eta: 1:02:39  time: 0.9280  data_time: 0.5542  memory: 2663  loss: 1.4871  loss_cls: 0.4945  loss_bbox: 0.9926
2023/06/05 12:54:35 - mmengine - INFO - Epoch(train)   [4][ 9/21]  lr: 2.8432e-04  eta: 1:03:53  time: 0.9043  data_time: 0.5311  memory: 2663  loss: 1.4760  loss_cls: 0.4877  loss_bbox: 0.9883
2023/06/05 12:54:35 - mmengine - INFO - Epoch(train)   [4][10/21]  lr: 2.8833e-04  eta: 1:03:18  time: 0.9039  data_time: 0.5311  memory: 2663  loss: 1.4972  loss_cls: 0.5006  loss_bbox: 0.9966
2023/06/05 12:54:35 - mmengine - INFO - Epoch(train)   [4][11/21]  lr: 2.9233e-04  eta: 1:02:42  time: 0.9036  data_time: 0.5311  memory: 2663  loss: 1.4816  loss_cls: 0.4903  loss_bbox: 0.9913
2023/06/05 12:54:36 - mmengine - INFO - Epoch(train)   [4][12/21]  lr: 2.9633e-04  eta: 1:02:08  time: 0.9041  data_time: 0.5311  memory: 2663  loss: 1.4747  loss_cls: 0.4948  loss_bbox: 0.9799
2023/06/05 12:54:37 - mmengine - INFO - Epoch(train)   [4][13/21]  lr: 3.0034e-04  eta: 1:02:55  time: 0.8934  data_time: 0.5197  memory: 2663  loss: 1.4878  loss_cls: 0.5079  loss_bbox: 0.9799
2023/06/05 12:54:38 - mmengine - INFO - Epoch(train)   [4][14/21]  lr: 3.0434e-04  eta: 1:02:25  time: 0.8914  data_time: 0.5197  memory: 2663  loss: 1.4714  loss_cls: 0.4987  loss_bbox: 0.9726
2023/06/05 12:54:38 - mmengine - INFO - Epoch(train)   [4][15/21]  lr: 3.0835e-04  eta: 1:01:52  time: 0.8883  data_time: 0.5196  memory: 2663  loss: 1.4771  loss_cls: 0.5118  loss_bbox: 0.9653
2023/06/05 12:54:38 - mmengine - INFO - Epoch(train)   [4][16/21]  lr: 3.1235e-04  eta: 1:01:21  time: 0.8873  data_time: 0.5196  memory: 2663  loss: 1.4883  loss_cls: 0.5194  loss_bbox: 0.9689
2023/06/05 12:54:41 - mmengine - INFO - Epoch(train)   [4][17/21]  lr: 3.1635e-04  eta: 1:02:34  time: 0.8790  data_time: 0.5090  memory: 2663  loss: 1.4873  loss_cls: 0.5217  loss_bbox: 0.9656
2023/06/05 12:54:41 - mmengine - INFO - Epoch(train)   [4][18/21]  lr: 3.2036e-04  eta: 1:02:07  time: 0.8791  data_time: 0.5090  memory: 2663  loss: 1.4923  loss_cls: 0.5261  loss_bbox: 0.9662
2023/06/05 12:54:41 - mmengine - INFO - Epoch(train)   [4][19/21]  lr: 3.2436e-04  eta: 1:01:39  time: 0.8783  data_time: 0.5090  memory: 2663  loss: 1.5016  loss_cls: 0.5333  loss_bbox: 0.9683
2023/06/05 12:54:42 - mmengine - INFO - Epoch(train)   [4][20/21]  lr: 3.2837e-04  eta: 1:01:12  time: 0.8787  data_time: 0.5090  memory: 2663  loss: 1.5007  loss_cls: 0.5332  loss_bbox: 0.9675
2023/06/05 12:54:43 - mmengine - INFO - Exp name: rtmdet_tiny_ear_20230605_125319
2023/06/05 12:54:43 - mmengine - INFO - Epoch(train)   [4][21/21]  lr: 3.3237e-04  eta: 1:01:51  time: 0.8718  data_time: 0.5039  memory: 2663  loss: 1.4959  loss_cls: 0.5428  loss_bbox: 0.9530
2023/06/05 12:54:47 - mmengine - INFO - Epoch(train)   [5][ 1/21]  lr: 3.3637e-04  eta: 1:04:03  time: 0.9370  data_time: 0.5691  memory: 2663  loss: 1.4875  loss_cls: 0.5460  loss_bbox: 0.9416
2023/06/05 12:54:48 - mmengine - INFO - Epoch(train)   [5][ 2/21]  lr: 3.4038e-04  eta: 1:03:37  time: 0.9382  data_time: 0.5691  memory: 2663  loss: 1.4853  loss_cls: 0.5457  loss_bbox: 0.9397
2023/06/05 12:54:48 - mmengine - INFO - Epoch(train)   [5][ 3/21]  lr: 3.4438e-04  eta: 1:03:11  time: 0.9391  data_time: 0.5691  memory: 2663  loss: 1.4840  loss_cls: 0.5455  loss_bbox: 0.9386
2023/06/05 12:54:48 - mmengine - INFO - Epoch(train)   [5][ 4/21]  lr: 3.4838e-04  eta: 1:02:45  time: 0.9145  data_time: 0.5440  memory: 2663  loss: 1.4335  loss_cls: 0.4964  loss_bbox: 0.9371
2023/06/05 12:54:50 - mmengine - INFO - Epoch(train)   [5][ 5/21]  lr: 3.5239e-04  eta: 1:03:23  time: 0.9409  data_time: 0.5730  memory: 2663  loss: 1.4170  loss_cls: 0.5034  loss_bbox: 0.9136
2023/06/05 12:54:50 - mmengine - INFO - Epoch(train)   [5][ 6/21]  lr: 3.5639e-04  eta: 1:02:54  time: 0.9395  data_time: 0.5730  memory: 2663  loss: 1.4108  loss_cls: 0.5106  loss_bbox: 0.9002
2023/06/05 12:54:51 - mmengine - INFO - Epoch(train)   [5][ 7/21]  lr: 3.6040e-04  eta: 1:02:36  time: 0.9435  data_time: 0.5764  memory: 2663  loss: 1.4376  loss_cls: 0.5433  loss_bbox: 0.8943
2023/06/05 12:54:51 - mmengine - INFO - Epoch(train)   [5][ 8/21]  lr: 3.6440e-04  eta: 1:02:08  time: 0.9101  data_time: 0.5443  memory: 2663  loss: 1.4411  loss_cls: 0.5516  loss_bbox: 0.8895
2023/06/05 12:54:53 - mmengine - INFO - Epoch(train)   [5][ 9/21]  lr: 3.6840e-04  eta: 1:02:53  time: 0.8829  data_time: 0.5180  memory: 2663  loss: 1.4396  loss_cls: 0.5593  loss_bbox: 0.8803
2023/06/05 12:54:53 - mmengine - INFO - Epoch(train)   [5][10/21]  lr: 3.7241e-04  eta: 1:02:26  time: 0.8811  data_time: 0.5177  memory: 2663  loss: 1.4424  loss_cls: 0.5712  loss_bbox: 0.8712
2023/06/05 12:54:54 - mmengine - INFO - Epoch(train)   [5][11/21]  lr: 3.7641e-04  eta: 1:02:00  time: 0.8808  data_time: 0.5177  memory: 2663  loss: 1.4469  loss_cls: 0.5815  loss_bbox: 0.8654
2023/06/05 12:54:54 - mmengine - INFO - Epoch(train)   [5][12/21]  lr: 3.8042e-04  eta: 1:01:34  time: 0.8807  data_time: 0.5177  memory: 2663  loss: 1.4502  loss_cls: 0.5901  loss_bbox: 0.8600
2023/06/05 12:54:56 - mmengine - INFO - Epoch(train)   [5][13/21]  lr: 3.8442e-04  eta: 1:02:21  time: 0.8881  data_time: 0.5242  memory: 2663  loss: 1.4515  loss_cls: 0.5979  loss_bbox: 0.8536
2023/06/05 12:54:57 - mmengine - INFO - Epoch(train)   [5][14/21]  lr: 3.8842e-04  eta: 1:01:56  time: 0.8837  data_time: 0.5206  memory: 2663  loss: 1.4489  loss_cls: 0.6031  loss_bbox: 0.8458
2023/06/05 12:54:57 - mmengine - INFO - Epoch(train)   [5][15/21]  lr: 3.9243e-04  eta: 1:01:29  time: 0.8823  data_time: 0.5206  memory: 2663  loss: 1.4417  loss_cls: 0.6018  loss_bbox: 0.8399
2023/06/05 12:54:57 - mmengine - INFO - Epoch(train)   [5][16/21]  lr: 3.9643e-04  eta: 1:01:04  time: 0.8804  data_time: 0.5205  memory: 2663  loss: 1.4437  loss_cls: 0.6113  loss_bbox: 0.8323
2023/06/05 12:54:59 - mmengine - INFO - Epoch(train)   [5][17/21]  lr: 4.0044e-04  eta: 1:01:50  time: 0.8837  data_time: 0.5245  memory: 2663  loss: 1.4419  loss_cls: 0.6194  loss_bbox: 0.8225
2023/06/05 12:54:59 - mmengine - INFO - Epoch(train)   [5][18/21]  lr: 4.0444e-04  eta: 1:01:27  time: 0.8754  data_time: 0.5177  memory: 2663  loss: 1.4440  loss_cls: 0.6225  loss_bbox: 0.8216
2023/06/05 12:55:00 - mmengine - INFO - Epoch(train)   [5][19/21]  lr: 4.0844e-04  eta: 1:01:02  time: 0.8723  data_time: 0.5177  memory: 2663  loss: 1.4422  loss_cls: 0.6259  loss_bbox: 0.8163
2023/06/05 12:55:00 - mmengine - INFO - Epoch(train)   [5][20/21]  lr: 4.1245e-04  eta: 1:00:37  time: 0.8693  data_time: 0.5176  memory: 2663  loss: 1.4413  loss_cls: 0.6328  loss_bbox: 0.8085
2023/06/05 12:55:02 - mmengine - INFO - Exp name: rtmdet_tiny_ear_20230605_125319
2023/06/05 12:55:02 - mmengine - INFO - Epoch(train)   [5][21/21]  lr: 4.1645e-04  eta: 1:01:07  time: 0.8768  data_time: 0.5265  memory: 2663  loss: 1.4406  loss_cls: 0.6366  loss_bbox: 0.8040
2023/06/05 12:55:03 - mmengine - INFO - Epoch(val)   [5][ 1/11]    eta: 0:00:11  time: 1.1915  data_time: 1.0232  memory: 302  
2023/06/05 12:55:03 - mmengine - INFO - Epoch(val)   [5][ 2/11]    eta: 0:00:05  time: 0.6243  data_time: 0.5131  memory: 302  
2023/06/05 12:55:04 - mmengine - INFO - Epoch(val)   [5][ 3/11]    eta: 0:00:05  time: 0.6511  data_time: 0.5580  memory: 302  
2023/06/05 12:55:04 - mmengine - INFO - Epoch(val)   [5][ 4/11]    eta: 0:00:03  time: 0.5043  data_time: 0.4189  memory: 302  
2023/06/05 12:55:05 - mmengine - INFO - Epoch(val)   [5][ 5/11]    eta: 0:00:03  time: 0.5571  data_time: 0.4771  memory: 302  
2023/06/05 12:55:05 - mmengine - INFO - Epoch(val)   [5][ 6/11]    eta: 0:00:02  time: 0.4748  data_time: 0.3979  memory: 302  
2023/06/05 12:55:05 - mmengine - INFO - Epoch(val)   [5][ 7/11]    eta: 0:00:02  time: 0.5079  data_time: 0.4345  memory: 302  
2023/06/05 12:55:05 - mmengine - INFO - Epoch(val)   [5][ 8/11]    eta: 0:00:01  time: 0.4533  data_time: 0.3808  memory: 302  
2023/06/05 12:55:06 - mmengine - INFO - Epoch(val)   [5][ 9/11]    eta: 0:00:00  time: 0.4825  data_time: 0.4118  memory: 302  
2023/06/05 12:55:06 - mmengine - INFO - Epoch(val)   [5][10/11]    eta: 0:00:00  time: 0.4405  data_time: 0.3711  memory: 302  
2023/06/05 12:55:07 - mmengine - INFO - Epoch(val)   [5][11/11]    eta: 0:00:00  time: 0.4544  data_time: 0.3799  memory: 252  
2023/06/05 12:55:07 - mmengine - INFO - Evaluating bbox...
2023/06/05 12:55:07 - mmengine - INFO - bbox_mAP_copypaste: 0.038 0.102 0.012 -1.000 -1.000 0.038
2023/06/05 12:55:07 - mmengine - INFO - Epoch(val) [5][11/11]    coco/bbox_mAP: 0.0380  coco/bbox_mAP_50: 0.1020  coco/bbox_mAP_75: 0.0120  coco/bbox_mAP_s: -1.0000  coco/bbox_mAP_m: -1.0000  coco/bbox_mAP_l: 0.0380  data_time: 0.3799  time: 0.4544
2023/06/05 12:55:09 - mmengine - INFO - The best checkpoint with 0.0380 coco/bbox_mAP at 5 epoch is saved to best_coco_bbox_mAP_epoch_5.pth.
2023/06/05 12:55:12 - mmengine - INFO - Epoch(train)   [6][ 1/21]  lr: 4.2046e-04  eta: 1:02:46  time: 0.9205  data_time: 0.5711  memory: 2663  loss: 1.4462  loss_cls: 0.6433  loss_bbox: 0.8029
2023/06/05 12:55:13 - mmengine - INFO - Epoch(train)   [6][ 2/21]  lr: 4.2446e-04  eta: 1:02:22  time: 0.9189  data_time: 0.5711  memory: 2663  loss: 1.4467  loss_cls: 0.6457  loss_bbox: 0.8011
2023/06/05 12:55:13 - mmengine - INFO - Epoch(train)   [6][ 3/21]  lr: 4.2846e-04  eta: 1:02:02  time: 0.9176  data_time: 0.5711  memory: 2663  loss: 1.4467  loss_cls: 0.6458  loss_bbox: 0.8008
2023/06/05 12:55:13 - mmengine - INFO - Epoch(train)   [6][ 4/21]  lr: 4.3247e-04  eta: 1:01:43  time: 0.9013  data_time: 0.5525  memory: 2663  loss: 1.4426  loss_cls: 0.6380  loss_bbox: 0.8046
2023/06/05 12:55:15 - mmengine - INFO - Epoch(train)   [6][ 5/21]  lr: 4.3647e-04  eta: 1:02:14  time: 0.9065  data_time: 0.5606  memory: 2663  loss: 1.4440  loss_cls: 0.6392  loss_bbox: 0.8048
2023/06/05 12:55:16 - mmengine - INFO - Epoch(train)   [6][ 6/21]  lr: 4.4048e-04  eta: 1:01:51  time: 0.9050  data_time: 0.5606  memory: 2663  loss: 1.4465  loss_cls: 0.6425  loss_bbox: 0.8040
2023/06/05 12:55:16 - mmengine - INFO - Epoch(train)   [6][ 7/21]  lr: 4.4448e-04  eta: 1:01:30  time: 0.9049  data_time: 0.5606  memory: 2663  loss: 1.4339  loss_cls: 0.6428  loss_bbox: 0.7911
2023/06/05 12:55:16 - mmengine - INFO - Epoch(train)   [6][ 8/21]  lr: 4.4848e-04  eta: 1:01:09  time: 0.8833  data_time: 0.5381  memory: 2663  loss: 1.4303  loss_cls: 0.6532  loss_bbox: 0.7771
2023/06/05 12:55:19 - mmengine - INFO - Epoch(train)   [6][ 9/21]  lr: 4.5249e-04  eta: 1:02:08  time: 0.8650  data_time: 0.5194  memory: 2663  loss: 1.4268  loss_cls: 0.6542  loss_bbox: 0.7725
2023/06/05 12:55:19 - mmengine - INFO - Epoch(train)   [6][10/21]  lr: 4.5649e-04  eta: 1:01:47  time: 0.8653  data_time: 0.5194  memory: 2663  loss: 1.4336  loss_cls: 0.6484  loss_bbox: 0.7852
2023/06/05 12:55:20 - mmengine - INFO - Epoch(train)   [6][11/21]  lr: 4.6050e-04  eta: 1:01:28  time: 0.8660  data_time: 0.5194  memory: 2663  loss: 1.4316  loss_cls: 0.6442  loss_bbox: 0.7875
2023/06/05 12:55:20 - mmengine - INFO - Epoch(train)   [6][12/21]  lr: 4.6450e-04  eta: 1:01:10  time: 0.8675  data_time: 0.5195  memory: 2663  loss: 1.4393  loss_cls: 0.6521  loss_bbox: 0.7872
2023/06/05 12:55:23 - mmengine - INFO - Epoch(train)   [6][13/21]  lr: 4.6850e-04  eta: 1:02:10  time: 0.8827  data_time: 0.5338  memory: 2663  loss: 1.4389  loss_cls: 0.6536  loss_bbox: 0.7853
2023/06/05 12:55:23 - mmengine - INFO - Epoch(train)   [6][14/21]  lr: 4.7251e-04  eta: 1:01:53  time: 0.8849  data_time: 0.5338  memory: 2663  loss: 1.4373  loss_cls: 0.6541  loss_bbox: 0.7832
2023/06/05 12:55:23 - mmengine - INFO - Epoch(train)   [6][15/21]  lr: 4.7651e-04  eta: 1:01:34  time: 0.8868  data_time: 0.5338  memory: 2663  loss: 1.4310  loss_cls: 0.6482  loss_bbox: 0.7828
2023/06/05 12:55:24 - mmengine - INFO - Epoch(train)   [6][16/21]  lr: 4.8052e-04  eta: 1:01:15  time: 0.8878  data_time: 0.5338  memory: 2663  loss: 1.4370  loss_cls: 0.6552  loss_bbox: 0.7818
2023/06/05 12:55:25 - mmengine - INFO - Epoch(train)   [6][17/21]  lr: 4.8452e-04  eta: 1:01:32  time: 0.8722  data_time: 0.5212  memory: 2663  loss: 1.4621  loss_cls: 0.6828  loss_bbox: 0.7794
2023/06/05 12:55:26 - mmengine - INFO - Epoch(train)   [6][18/21]  lr: 4.8852e-04  eta: 1:01:11  time: 0.8716  data_time: 0.5211  memory: 2663  loss: 1.4569  loss_cls: 0.6825  loss_bbox: 0.7744
2023/06/05 12:55:26 - mmengine - INFO - Epoch(train)   [6][19/21]  lr: 4.9253e-04  eta: 1:00:53  time: 0.8733  data_time: 0.5211  memory: 2663  loss: 1.4573  loss_cls: 0.6757  loss_bbox: 0.7817
2023/06/05 12:55:26 - mmengine - INFO - Epoch(train)   [6][20/21]  lr: 4.9653e-04  eta: 1:00:34  time: 0.8739  data_time: 0.5211  memory: 2663  loss: 1.4558  loss_cls: 0.6692  loss_bbox: 0.7865
2023/06/05 12:55:28 - mmengine - INFO - Exp name: rtmdet_tiny_ear_20230605_125319
2023/06/05 12:55:28 - mmengine - INFO - Epoch(train)   [6][21/21]  lr: 5.0054e-04  eta: 1:01:09  time: 0.8783  data_time: 0.5272  memory: 2663  loss: 1.4552  loss_cls: 0.6723  loss_bbox: 0.7830
2023/06/05 12:55:32 - mmengine - INFO - Epoch(train)   [7][ 1/21]  lr: 5.0454e-04  eta: 1:02:40  time: 0.9464  data_time: 0.5946  memory: 2663  loss: 1.4646  loss_cls: 0.6851  loss_bbox: 0.7795
2023/06/05 12:55:32 - mmengine - INFO - Epoch(train)   [7][ 2/21]  lr: 5.0854e-04  eta: 1:02:21  time: 0.9472  data_time: 0.5946  memory: 2663  loss: 1.4547  loss_cls: 0.6830  loss_bbox: 0.7717
2023/06/05 12:55:33 - mmengine - INFO - Epoch(train)   [7][ 3/21]  lr: 5.1255e-04  eta: 1:02:03  time: 0.9484  data_time: 0.5946  memory: 2663  loss: 1.4631  loss_cls: 0.6843  loss_bbox: 0.7788
2023/06/05 12:55:33 - mmengine - INFO - Epoch(train)   [7][ 4/21]  lr: 5.1655e-04  eta: 1:01:46  time: 0.9093  data_time: 0.5584  memory: 2663  loss: 1.4622  loss_cls: 0.6808  loss_bbox: 0.7814
2023/06/05 12:55:35 - mmengine - INFO - Epoch(train)   [7][ 5/21]  lr: 5.2056e-04  eta: 1:02:13  time: 0.9380  data_time: 0.5871  memory: 2663  loss: 1.4599  loss_cls: 0.6844  loss_bbox: 0.7756
2023/06/05 12:55:35 - mmengine - INFO - Epoch(train)   [7][ 6/21]  lr: 5.2456e-04  eta: 1:01:54  time: 0.9371  data_time: 0.5871  memory: 2663  loss: 1.4567  loss_cls: 0.6851  loss_bbox: 0.7716
2023/06/05 12:55:36 - mmengine - INFO - Epoch(train)   [7][ 7/21]  lr: 5.2856e-04  eta: 1:01:36  time: 0.9373  data_time: 0.5872  memory: 2663  loss: 1.4713  loss_cls: 0.6998  loss_bbox: 0.7715
2023/06/05 12:55:36 - mmengine - INFO - Epoch(train)   [7][ 8/21]  lr: 5.3257e-04  eta: 1:01:18  time: 0.9096  data_time: 0.5597  memory: 2663  loss: 1.4725  loss_cls: 0.6982  loss_bbox: 0.7743
2023/06/05 12:55:38 - mmengine - INFO - Epoch(train)   [7][ 9/21]  lr: 5.3657e-04  eta: 1:01:54  time: 0.8790  data_time: 0.5293  memory: 2663  loss: 1.4740  loss_cls: 0.6986  loss_bbox: 0.7755
2023/06/05 12:55:39 - mmengine - INFO - Epoch(train)   [7][10/21]  lr: 5.4058e-04  eta: 1:01:37  time: 0.8785  data_time: 0.5293  memory: 2663  loss: 1.4763  loss_cls: 0.7025  loss_bbox: 0.7738
2023/06/05 12:55:39 - mmengine - INFO - Epoch(train)   [7][11/21]  lr: 5.4458e-04  eta: 1:01:21  time: 0.8787  data_time: 0.5293  memory: 2663  loss: 1.4802  loss_cls: 0.7071  loss_bbox: 0.7731
2023/06/05 12:55:39 - mmengine - INFO - Epoch(train)   [7][12/21]  lr: 5.4858e-04  eta: 1:01:06  time: 0.8798  data_time: 0.5293  memory: 2663  loss: 1.4809  loss_cls: 0.7117  loss_bbox: 0.7693
2023/06/05 12:55:42 - mmengine - INFO - Epoch(train)   [7][13/21]  lr: 5.5259e-04  eta: 1:01:44  time: 0.8891  data_time: 0.5364  memory: 2663  loss: 1.4882  loss_cls: 0.7150  loss_bbox: 0.7732
2023/06/05 12:55:42 - mmengine - INFO - Epoch(train)   [7][14/21]  lr: 5.5659e-04  eta: 1:01:27  time: 0.8897  data_time: 0.5364  memory: 2663  loss: 1.4856  loss_cls: 0.7172  loss_bbox: 0.7684
2023/06/05 12:55:42 - mmengine - INFO - Epoch(train)   [7][15/21]  lr: 5.6059e-04  eta: 1:01:09  time: 0.8854  data_time: 0.5330  memory: 2663  loss: 1.4557  loss_cls: 0.6912  loss_bbox: 0.7646
2023/06/05 12:55:43 - mmengine - INFO - Epoch(train)   [7][16/21]  lr: 5.6460e-04  eta: 1:00:52  time: 0.8864  data_time: 0.5330  memory: 2663  loss: 1.4517  loss_cls: 0.6844  loss_bbox: 0.7673
2023/06/05 12:55:45 - mmengine - INFO - Epoch(train)   [7][17/21]  lr: 5.6860e-04  eta: 1:01:35  time: 0.8961  data_time: 0.5442  memory: 2663  loss: 1.4467  loss_cls: 0.6835  loss_bbox: 0.7632
2023/06/05 12:55:45 - mmengine - INFO - Epoch(train)   [7][18/21]  lr: 5.7261e-04  eta: 1:01:18  time: 0.8964  data_time: 0.5442  memory: 2663  loss: 1.4430  loss_cls: 0.6810  loss_bbox: 0.7620
2023/06/05 12:55:46 - mmengine - INFO - Epoch(train)   [7][19/21]  lr: 5.7661e-04  eta: 1:01:00  time: 0.8956  data_time: 0.5442  memory: 2663  loss: 1.4364  loss_cls: 0.6738  loss_bbox: 0.7626
2023/06/05 12:55:46 - mmengine - INFO - Epoch(train)   [7][20/21]  lr: 5.8061e-04  eta: 1:00:45  time: 0.8973  data_time: 0.5442  memory: 2663  loss: 1.4311  loss_cls: 0.6686  loss_bbox: 0.7625
2023/06/05 12:55:48 - mmengine - INFO - Exp name: rtmdet_tiny_ear_20230605_125319
2023/06/05 12:55:48 - mmengine - INFO - Epoch(train)   [7][21/21]  lr: 5.8462e-04  eta: 1:01:11  time: 0.8943  data_time: 0.5427  memory: 2663  loss: 1.4248  loss_cls: 0.6669  loss_bbox: 0.7578
2023/06/05 12:55:52 - mmengine - INFO - Epoch(train)   [8][ 1/21]  lr: 5.8862e-04  eta: 1:02:44  time: 0.9740  data_time: 0.6217  memory: 2663  loss: 1.4198  loss_cls: 0.6662  loss_bbox: 0.7537
2023/06/05 12:55:53 - mmengine - INFO - Epoch(train)   [8][ 2/21]  lr: 5.9263e-04  eta: 1:02:26  time: 0.9743  data_time: 0.6217  memory: 2663  loss: 1.4201  loss_cls: 0.6646  loss_bbox: 0.7554
2023/06/05 12:55:53 - mmengine - INFO - Epoch(train)   [8][ 3/21]  lr: 5.9663e-04  eta: 1:02:11  time: 0.9767  data_time: 0.6218  memory: 2663  loss: 1.4156  loss_cls: 0.6605  loss_bbox: 0.7551
2023/06/05 12:55:53 - mmengine - INFO - Epoch(train)   [8][ 4/21]  lr: 6.0063e-04  eta: 1:01:57  time: 0.9442  data_time: 0.5883  memory: 2663  loss: 1.4199  loss_cls: 0.6590  loss_bbox: 0.7609
2023/06/05 12:55:56 - mmengine - INFO - Epoch(train)   [8][ 5/21]  lr: 6.0464e-04  eta: 1:02:29  time: 0.9807  data_time: 0.6249  memory: 2663  loss: 1.4182  loss_cls: 0.6648  loss_bbox: 0.7535
2023/06/05 12:55:56 - mmengine - INFO - Epoch(train)   [8][ 6/21]  lr: 6.0864e-04  eta: 1:02:13  time: 0.9811  data_time: 0.6249  memory: 2663  loss: 1.4153  loss_cls: 0.6608  loss_bbox: 0.7544
2023/06/05 12:55:56 - mmengine - INFO - Epoch(train)   [8][ 7/21]  lr: 6.1265e-04  eta: 1:01:56  time: 0.9818  data_time: 0.6249  memory: 2663  loss: 1.4129  loss_cls: 0.6640  loss_bbox: 0.7489
2023/06/05 12:55:57 - mmengine - INFO - Epoch(train)   [8][ 8/21]  lr: 6.1665e-04  eta: 1:01:40  time: 0.9551  data_time: 0.5987  memory: 2663  loss: 1.4274  loss_cls: 0.6761  loss_bbox: 0.7513
2023/06/05 12:55:59 - mmengine - INFO - Epoch(train)   [8][ 9/21]  lr: 6.2065e-04  eta: 1:02:11  time: 0.9285  data_time: 0.5690  memory: 2663  loss: 1.4294  loss_cls: 0.6775  loss_bbox: 0.7519
2023/06/05 12:55:59 - mmengine - INFO - Epoch(train)   [8][10/21]  lr: 6.2466e-04  eta: 1:01:58  time: 0.9307  data_time: 0.5689  memory: 2663  loss: 1.4349  loss_cls: 0.6847  loss_bbox: 0.7502
2023/06/05 12:56:00 - mmengine - INFO - Epoch(train)   [8][11/21]  lr: 6.2866e-04  eta: 1:01:44  time: 0.9313  data_time: 0.5689  memory: 2663  loss: 1.4435  loss_cls: 0.6869  loss_bbox: 0.7566
2023/06/05 12:56:00 - mmengine - INFO - Epoch(train)   [8][12/21]  lr: 6.3267e-04  eta: 1:01:30  time: 0.9303  data_time: 0.5689  memory: 2663  loss: 1.4485  loss_cls: 0.6919  loss_bbox: 0.7566
2023/06/05 12:56:02 - mmengine - INFO - Epoch(train)   [8][13/21]  lr: 6.3667e-04  eta: 1:02:04  time: 0.9416  data_time: 0.5785  memory: 2663  loss: 1.4463  loss_cls: 0.6948  loss_bbox: 0.7514
2023/06/05 12:56:03 - mmengine - INFO - Epoch(train)   [8][14/21]  lr: 6.4067e-04  eta: 1:01:56  time: 0.9481  data_time: 0.5848  memory: 2663  loss: 1.4460  loss_cls: 0.6935  loss_bbox: 0.7525
2023/06/05 12:56:03 - mmengine - INFO - Epoch(train)   [8][15/21]  lr: 6.4468e-04  eta: 1:01:41  time: 0.9480  data_time: 0.5849  memory: 2663  loss: 1.4491  loss_cls: 0.6939  loss_bbox: 0.7552
2023/06/05 12:56:04 - mmengine - INFO - Epoch(train)   [8][16/21]  lr: 6.4868e-04  eta: 1:01:26  time: 0.9477  data_time: 0.5849  memory: 2663  loss: 1.4507  loss_cls: 0.6969  loss_bbox: 0.7538
2023/06/05 12:56:06 - mmengine - INFO - Epoch(train)   [8][17/21]  lr: 6.5269e-04  eta: 1:01:51  time: 0.9356  data_time: 0.5719  memory: 2663  loss: 1.4520  loss_cls: 0.7003  loss_bbox: 0.7517
2023/06/05 12:56:06 - mmengine - INFO - Epoch(train)   [8][18/21]  lr: 6.5669e-04  eta: 1:01:40  time: 0.9389  data_time: 0.5742  memory: 2663  loss: 1.4565  loss_cls: 0.7089  loss_bbox: 0.7476
2023/06/05 12:56:06 - mmengine - INFO - Epoch(train)   [8][19/21]  lr: 6.6069e-04  eta: 1:01:24  time: 0.9371  data_time: 0.5742  memory: 2663  loss: 1.4611  loss_cls: 0.7110  loss_bbox: 0.7502
2023/06/05 12:56:07 - mmengine - INFO - Epoch(train)   [8][20/21]  lr: 6.6470e-04  eta: 1:01:08  time: 0.9346  data_time: 0.5742  memory: 2663  loss: 1.4503  loss_cls: 0.7010  loss_bbox: 0.7493
2023/06/05 12:56:09 - mmengine - INFO - Exp name: rtmdet_tiny_ear_20230605_125319
2023/06/05 12:56:09 - mmengine - INFO - Epoch(train)   [8][21/21]  lr: 6.6870e-04  eta: 1:01:32  time: 0.9203  data_time: 0.5595  memory: 2663  loss: 1.4504  loss_cls: 0.7022  loss_bbox: 0.7483
2023/06/05 12:56:12 - mmengine - INFO - Epoch(train)   [9][ 1/21]  lr: 6.7271e-04  eta: 1:02:40  time: 0.9877  data_time: 0.6261  memory: 2663  loss: 1.4521  loss_cls: 0.7034  loss_bbox: 0.7487
